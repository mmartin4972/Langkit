{"ast":null,"code":"import React, { useState, useEffect, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport { throttle } from 'lodash';\nconst ScrollReveal = React.forwardRef((props, ref) => {\n  const [viewportHeight, setViewportheight] = useState(window.innerHeight);\n  const [revealEl, setRevealel] = useState([]);\n\n  const checkComplete = () => {\n    return revealEl.length <= document.querySelectorAll('[class*=reveal-].is-revealed').length;\n  };\n\n  const elementIsVisible = (el, offset) => {\n    return el.getBoundingClientRect().top <= viewportHeight - offset;\n  };\n\n  const revealElements = () => {\n    if (checkComplete()) return;\n\n    for (let i = 0; i < revealEl.length; i++) {\n      let el = revealEl[i];\n      let revealDelay = el.getAttribute('data-reveal-delay');\n      let revealOffset = el.getAttribute('data-reveal-offset') ? el.getAttribute('data-reveal-offset') : '200';\n      let listenedEl = el.getAttribute('data-reveal-container') ? el.closest(el.getAttribute('data-reveal-container')) : el;\n\n      if (elementIsVisible(listenedEl, revealOffset) && !el.classList.contains('is-revealed')) {\n        if (revealDelay && revealDelay !== 0) {\n          setTimeout(function () {\n            el.classList.add('is-revealed');\n          }, revealDelay);\n        } else {\n          el.classList.add('is-revealed');\n        }\n      }\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    init() {\n      setRevealel(document.querySelectorAll('[class*=reveal-]'));\n    }\n\n  }));\n  useEffect(() => {\n    if (typeof revealEl !== 'undefined' && revealEl.length > 0) {\n      if (!checkComplete()) {\n        window.addEventListener('scroll', handleScroll);\n        window.addEventListener('resize', handleResize);\n      }\n\n      revealElements();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [revealEl]);\n\n  const handleListeners = () => {\n    if (!checkComplete()) return;\n    window.removeEventListener('scroll', handleScroll);\n    window.removeEventListener('resize', handleResize);\n  };\n\n  const handleScroll = throttle(() => {\n    handleListeners();\n    revealElements();\n  }, 30);\n  const handleResize = throttle(() => {\n    setViewportheight(window.innerHeight);\n  }, 30);\n  useEffect(() => {\n    handleListeners();\n    revealElements(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewportHeight]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.children());\n});\nScrollReveal.propTypes = {\n  children: PropTypes.func.isRequired\n};\nexport default ScrollReveal;","map":{"version":3,"sources":["C:/Users/Carson Ellis/Desktop/Langkit/open-react-template/src/utils/ScrollReveal.js"],"names":["React","useState","useEffect","useImperativeHandle","PropTypes","throttle","ScrollReveal","forwardRef","props","ref","viewportHeight","setViewportheight","window","innerHeight","revealEl","setRevealel","checkComplete","length","document","querySelectorAll","elementIsVisible","el","offset","getBoundingClientRect","top","revealElements","i","revealDelay","getAttribute","revealOffset","listenedEl","closest","classList","contains","setTimeout","add","init","addEventListener","handleScroll","handleResize","handleListeners","removeEventListener","children","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useImperativeHandle } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { throttle } from 'lodash';\r\n\r\nconst ScrollReveal = React.forwardRef((props, ref) => {\r\n\r\n  const [viewportHeight, setViewportheight] = useState(window.innerHeight); \r\n  const [revealEl, setRevealel] = useState([]);\r\n\r\n  const checkComplete = () => {\r\n    return revealEl.length <= document.querySelectorAll('[class*=reveal-].is-revealed').length;\r\n  };\r\n\r\n  const elementIsVisible = (el, offset) => {\r\n    return (el.getBoundingClientRect().top <= viewportHeight - offset);\r\n  };\r\n\r\n  const revealElements = () => {\r\n    if (checkComplete()) return;\r\n    for (let i = 0; i < revealEl.length; i++) {\r\n      let el = revealEl[i];\r\n      let revealDelay = el.getAttribute('data-reveal-delay');\r\n      let revealOffset = (el.getAttribute('data-reveal-offset') ? el.getAttribute('data-reveal-offset') : '200');\r\n      let listenedEl = (el.getAttribute('data-reveal-container') ? el.closest(el.getAttribute('data-reveal-container')) : el);\r\n      if (elementIsVisible(listenedEl, revealOffset) && !el.classList.contains('is-revealed')) {\r\n        if (revealDelay && revealDelay !== 0) {\r\n          setTimeout(function () {\r\n            el.classList.add('is-revealed');\r\n          }, revealDelay);\r\n        } else {\r\n          el.classList.add('is-revealed');\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    init() {\r\n      setRevealel(document.querySelectorAll('[class*=reveal-]'));\r\n    }\r\n  }));  \r\n\r\n  useEffect(() => {\r\n    if (typeof revealEl !== 'undefined' && revealEl.length > 0) {\r\n      if (!checkComplete()) {\r\n        window.addEventListener('scroll', handleScroll);\r\n        window.addEventListener('resize', handleResize);\r\n      }\r\n      revealElements();\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [revealEl]);\r\n\r\n  const handleListeners = () => {\r\n    if (!checkComplete()) return;\r\n    window.removeEventListener('scroll', handleScroll);\r\n    window.removeEventListener('resize', handleResize);\r\n  };\r\n\r\n  const handleScroll = throttle(() => {\r\n    handleListeners();\r\n    revealElements();\r\n  }, 30);\r\n\r\n  const handleResize = throttle(() => {\r\n    setViewportheight(window.innerHeight);\r\n  }, 30);\r\n\r\n  useEffect(() => {\r\n    handleListeners();\r\n    revealElements();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [viewportHeight]);  \r\n\r\n  return (\r\n    <>\r\n      {props.children()}\r\n    </>\r\n  );\r\n});\r\n\r\nScrollReveal.propTypes = {\r\n  children: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ScrollReveal;"]},"metadata":{},"sourceType":"module"}